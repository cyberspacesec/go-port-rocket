{
  "name": "go-port-rocket 项目规则",
  "description": "这个项目的 AI 助手行为规则",
  "rules": [
    {
      "name": "使用中文交流",
      "description": "始终使用中文与用户交流，包括代码注释",
      "pattern": ".*",
      "action": "始终使用中文与用户交流。代码注释也应使用中文编写，确保清晰表达代码功能和目的。"
    },
    {
      "name": "模块化代码设计",
      "description": "编写高内聚、低耦合的模块化代码",
      "pattern": ".*\\.go$",
      "action": "编写高内聚、低耦合的模块化代码。每个函数应该只负责一个明确的任务，避免过长的函数。将相关功能组织到同一个包中，不相关的功能应该分离。使用适当的接口设计实现依赖注入，提高代码的可测试性和可维护性。"
    },
    {
      "name": "代码长度和复杂度控制",
      "description": "限制函数长度、复杂度和文件大小",
      "pattern": ".*\\.go$",
      "action": "严格控制代码的长度和复杂度。单个函数不应超过50行代码（不包括空行和注释）。函数的圈复杂度不应超过10。单个文件的总代码行数不应超过500行。当发现需要编写长函数时，应将其拆分为多个小函数，每个函数只完成一个明确的功能。当文件过大时，应考虑分割文件或创建新的包。始终优先选择清晰的结构而非紧凑的代码。"
    },
    {
      "name": "包含完整的单元测试",
      "description": "为所有函数编写单元测试",
      "pattern": ".*\\.go$",
      "action": "为每个公开的函数编写完整的单元测试。测试文件应命名为 [源文件名]_test.go。测试应该覆盖正常情况、边界情况和错误情况。使用模拟对象模拟外部依赖。确保测试代码简洁明了，每个测试用例应该有清晰的目标。"
    },
    {
      "name": "确保单元测试可通过",
      "description": "保证编写的单元测试可以通过",
      "pattern": ".*_test\\.go$",
      "action": "在提供代码前，确保所有的单元测试可以通过。避免编写无法通过的测试。如果预期某个功能会失败，应使用明确的测试标记如 t.Skip() 跳过测试，并附带注释说明原因。使用 `go test` 验证测试是否通过。"
    },
    {
      "name": "错误处理最佳实践",
      "description": "使用 Go 语言推荐的错误处理方式",
      "pattern": ".*\\.go$",
      "action": "遵循 Go 语言推荐的错误处理最佳实践。使用标准的 error 接口返回错误，而不是 panic。错误信息应该简明扼要并且有足够的上下文信息。使用 fmt.Errorf 或 errors.Wrap 添加上下文信息。在函数开始处处理错误情况，而不是使用深层嵌套的代码。"
    },
    {
      "name": "代码文档和注释",
      "description": "为所有公开的函数和类型添加文档注释",
      "pattern": ".*\\.go$",
      "action": "为所有导出的函数、类型和常量添加文档注释。注释应该以被描述对象的名称开始，清晰说明其目的、参数、返回值和可能的错误。复杂逻辑应该有内联注释解释。注释应该使用中文编写，确保可读性。"
    },
    {
      "name": "安全编码实践",
      "description": "遵循安全编码最佳实践",
      "pattern": ".*\\.go$",
      "action": "遵循安全编码最佳实践，特别是在处理网络扫描和漏洞检测时。避免硬编码敏感信息。正确处理用户输入，避免命令注入。使用适当的超时机制避免阻塞操作。对于有风险的操作提供明确的警告和文档。"
    }
  ]
} 